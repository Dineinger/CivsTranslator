module CivsTranslator.ItemToText
open System.Text
open Dotgem.Text

let private convertNodeValue (value) =
    match value with
    | NodeValue.Text t -> t
    | NodeValue.YesNo x -> if x then "Ja" else "Nein"
    | NodeValue.None -> raise(System.NotImplementedException())

let convertNodeLine (sb : StringBuilder) (node : Node) =
    let nodeType = node.NodeType
    let value = node.Value |> convertNodeValue
    sb.AppendSpace(2) |> ignore
    match nodeType with
    | NodeType.H1 ->
        raise(exn "this should not happen")
    | NodeType.Point ->
        sb.Append("§7  §x§7§c§7§f§9§3◉ §x§1§7§9§2§9§9").Append(value).AppendLine()
    | NodeType.ListHeader ->
        sb.Append("§x§b§c§c§0§c§c").Append(value).Append(':').AppendLine()
    | NodeType.Text ->
        sb.Append("§7").Append(value).AppendLine()
    | _ ->
        sb.Append("!!!").Append(value).AppendLine()
    |> ignore

let rec convertNode (sb : StringBuilder) (node : Node) =
    convertNodeLine sb node
    for n in node.Children do
        convertNode sb n

let convertItem (sb : StringBuilder) (item : Item) =
    let key = item.Key
    let name = item.Name
    sb.Append(key).Append("-name: ") |> ignore
    Surround.withQuotes sb name
    sb.AppendLine() |> ignore
    sb.Append(key).AppendLine("-desc: |") |> ignore
    for node in item.Description.Children do
        convertNode sb node

let convert (items : Item array) =
    let sb = StringBuilder()
    sb.AppendLine("# Generated by Civs Translator").AppendLine() |> ignore
    for item in items do
        item
        |> convertItem sb
    sb.ToString()

