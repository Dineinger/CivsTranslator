namespace McTextTransforming.TextGeneration
open System.Text
open Dotgem.Text
open McTextTransforming

module private McTextStructures =
    let bulletPoint = "§7  §x§7§c§7§f§9§3◉ "

type McTextGenerator(textColors) =
    let textColors : TextColors = textColors

    let rec coloriseText (sb : StringBuilder) (nodeType) (value : ExtensiveNodeValue) =
        for v in value.Values do
            match v with
            | TextValue.Text t ->
                sb.Append(textColors.GetColorFor nodeType v).Append(t) |> ignore
            | TextValue.YesNo x -> sb.Append(textColors.GetColorFor nodeType v).Append(YesNo.toGerman(x)) |> ignore
            | TextValue.Extensive x ->
                coloriseText sb nodeType x

    let convertNodeLine (sb : StringBuilder) (node : Node) =
        let nodeType = node.NodeType
        let value = node.Value
        sb.AppendSpace(2) |> ignore
        match nodeType with
        | NodeType.H1 ->
            raise(exn "this should not happen")
        | NodeType.Point ->
            sb.Append(McTextStructures.bulletPoint) |> ignore
            coloriseText sb nodeType value
            sb.AppendLine() |> ignore
        | NodeType.ListHeader ->
            coloriseText sb nodeType value
            sb.Append(":") |> ignore
            sb.AppendLine() |> ignore
        | NodeType.Text ->
            coloriseText sb nodeType value
            sb.AppendLine() |> ignore


    let rec convertNode (sb : StringBuilder) (node : Node) =
        convertNodeLine sb node
        for n in node.Children do
            convertNode sb n

    let convertItem (sb : StringBuilder) (item : Item) =
        let key = item.Key
        let name = item.Name
        sb.Append(key).Append("-name: ") |> ignore
        sb.WithQuotationmarks $"{textColors.H1}{name}" |> ignore
        sb.AppendLine() |> ignore
        sb.Append(key).AppendLine("-desc: |") |> ignore
        for node in item.Description.Children do
            convertNode sb node

    member _.Generate (items : Item array) =
        let sb = StringBuilder()
        sb.AppendLine("# Generated by Mc Text Transforming").AppendLine() |> ignore
        for item in items do
            convertItem sb item
        sb.ToString()
